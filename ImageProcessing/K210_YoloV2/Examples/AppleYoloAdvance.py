# object detector boot.py
# generated by maixhub.com

import sensor, image, lcd, time
import KPU as kpu
import gc, sys
import micropython

def getBoxCrossoverRate(box1, box2):
    x1 = max(box1[0], box2[0])
    x2 = min(box1[0] + box1[2], box2[0] + box2[2])
    y1 = max(box1[1], box2[1])
    y2 = min(box1[1] + box1[3], box2[1] + box2[3])
    if((x2 < x1) or (y2 < y1)):
        return 0
    else:
        minSize = min(min(box1[2] * box1[3]), min(box2[2] * box2[3]))
        return ((x2 - x1) * (y2 - y1)) / minSize


def fuseToSmallerBox(box1, box2):
    x1 = max(box1[0], box2[0])
    x2 = min(box1[0] + box1[2], box2[0] + box2[2])
    y1 = max(box1[1], box2[1])
    y2 = min(box1[1] + box1[3], box2[1] + box2[3])
    if((x2 < x1) or (y2 < y1)):
        return None
    return (x1, y1, x2 - x1, y2 - y1)


def fuseToMeanBox(box1, box2):
    x1 = (box1[0] + box2[0]) / 2
    x2 = x1 + (box1[2] + box2[2]) / 2
    y1 = (box1[1] + box2[1]) / 2
    y2 = y1 + (box1[3] + box2[3]) / 2
    return (x1, y1, x2 - x1, y2 - y1)


def main(anchors, labels = None, model_addr="/sd/m.kmodel", sensor_window=(224, 224), lcd_rotation=0, sensor_hmirror=False, sensor_vflip=False):
    sensor.reset()
    sensor.set_pixformat(sensor.RGB565)
    sensor.set_framesize(sensor.QVGA)
    sensor.set_windowing(sensor_window)
    sensor.run(1)

    lcd.init(type=1)
    lcd.rotation(lcd_rotation)
    lcd.clear(lcd.WHITE)

    if(labels == None):
        raise "labels undefined."

    task = kpu.load(model_addr)
    kpu.init_yolo2(task, 0.3, 0.3, 5, anchors) # threshold:[0,1], nms_value: [0, 1]

    appleThre = (36, 71, -52, -9, -21, 39)

    try:
        while 1:
            img = sensor.snapshot()
            t = time.ticks_ms()
            objects = kpu.run_yolo2(task, img)
            t = time.ticks_ms() - t            
            
            apple = None
            if objects:
                numberOfObjects = len(objects)
                if(numberOfObjects == 1):
                    apple = objects[0].rect()
                    img.draw_rectangle(objects[0].rect())
                    img.draw_string(objects[0].rect()[0], objects[0].rect()[1], "%s : %.2f" %(labels[objects[0].classid()], objects[0].value()), scale=2, color=(255, 0, 0))
                elif(numberOfObjects == 2):
                    result = fuseToSmallerBox(objects[0].rect(), objects[1].rect())
                    if(result):
                        apple = result
                        img.draw_rectangle(result)
                        img.draw_string(result[0], result[1], "%s : %.2f" %(labels[objects[0].classid()], objects[0].value()), scale=2, color=(255, 0, 0))

            img.draw_string(0, 200, "t:%dms" %(t), scale=2, color=(255, 0, 0))
            lcd.display(img)
            gc.collect()

    except Exception as e:
        raise e
    finally:
        kpu.deinit(task)


if __name__ == "__main__":
    try:
        labels = ["Apple"]
        anchors = [3.8125, 3.8125, 5.375, 5.375, 7.1875, 7.1875, 11.25, 11.3125, 9.125, 9.125]
        #main(anchors = anchors, labels=labels, model_addr=0x300000, lcd_rotation=2, sensor_window=(240, 240))
        main(anchors = anchors, labels=labels, model_addr="/sd/m.kmodel", lcd_rotation=2, sensor_window=(224, 224))
    except Exception as e:
        sys.print_exception(e)
    finally:
        gc.collect()
